<!--
總歸來說，依照Ajax使用的格式分類，有三種方式：

  向伺服器請求 HTML 片段，然後客戶端瀏覽器上的 JavaScript 再替換掉頁面上的元素
    第一種方式非常簡單，但是限制是一次只能更新一小塊內容。

  向伺服器請求 JavaScript 程式腳本，然後客戶端瀏覽器執行它
    Rails 預設使用第二種方式，程式撰寫容易

  向伺服器請求 JSON 或 XML 資料格式，然後客戶端瀏覽器的 JavaScript 解析後再動作。
    而第三種方式則將 JavaScript 程式都放在客戶端瀏覽器上，相較於第二種則多了解析 JSON 或 XML 的部份。
    以Web API的設計角度來看，與表現層無關的JSON格式是比較乾淨的，可以獲得比較好的重複使用性。
-->

<!-- Unobtrusive JavaScript -->
  <!-- Rails 從 3.0 後將Ajax使用的JavaScript都改成Unobtrusive JavaScript(UJS)方式。
  什麼是Unobtrusive呢？用個範例來說吧，它會將超連結改成用表單DELETE送出，並且用一個提示視窗來作確認：
   -->
  link_to 'Remove', event_path(1), :method => :delete, :data => { :confirm => "Sure?" }
  <!-- 在Rails 3之前，會輸出： -->
  <a onclick="if (confirm('Sure?')) { var f = document.createElement('form'); f.style.display = 'none'; this.parentNode.appendChild(f); f.method = 'POST'; f.action = this.href;var m = document.createElement('input'); m.setAttribute('type', 'hidden'); m.setAttribute('name', '_method'); m.setAttribute('value', 'delete'); f.appendChild(m);f.submit(); };return false;" href="/events/1">Remove</a>
  <!-- 在Rails 3之後，會輸出：-->
  <a rel="nofollow" data-confirm="Sure?" data-method="delete" class="delete" href="/events/1">Remove</a>
  <!-- Unobtrusive也就是將JavaScript程式與HTML完全分開，除了可以讓HTML碼乾淨之外，
  也可以支援更換不同的JavaScript Library，例如把Rails內建的jQuery換成Protytype.js或angular.js等等。
   -->
  <!-- 在Layout中有輸出一段<%= csrf_meta_tag %>的作用就是搭配給UJS使用的，
  讓JavaScript可以拿到CSRF安全驗證碼，我們會在安全一章討論到什麼是CSRF。
   -->

<!-- Ajax 表單 -->
  <!--   除了超連結 link_to 加上 :remote 可以變成 Ajax 之外，表單 form_for 也可以加上:remote變成 Ajax。-->
  form_for @user, :remote => true

<!-- Ajax Link -->
  <!--同理於超連結 link_to，按鈕 button_to 加上:remote => true參數也會變成 Ajax。-->
  <!-- 除了已經看過的 :data => { :confirm => "Are you Sure?" }之外，disable_with可以避免使用者連續按下送出：-->
  button_to "Remove", user_path(@user), :data => { :disable_with => 'Removing' }

<!-- 向伺服器請求 HTML 片段，然後客戶端瀏覽器上的 JavaScript 再替換掉頁面上的元素 -->
  <!-- 如此點下超連結後，就會把回傳的HTML置入到<div id="content">裡面。-->
  <%= link_to 'Hello!', welcome_say_hello_path, :id => "ajax-load"  %>
  <div id="content">
  </div>

  <script>
      $(document).ready(function() {
          $('#ajax-load').click( function(){
              $('#content').load( $(this).attr("href") );
              return false;
          });

      });
  </script>

<!-- 向伺服器請求 JavaScript 程式腳本，然後客戶端瀏覽器執行它 -->
  <!-- 編輯 app/views/events/index.html.erb，在迴圈中間加入 -->
  <%= link_to 'ajax show', event_path(event), :remote => true %>
  <!-- 編輯 app/controllers/events_controller.rb，在 show action 中加入 -->
  respond_to do |format|
    format.html
    format.js
  end
  <!-- 新增 app/views/events/_event.html.erb，內容與 show.html.erb 相同 -->
  $('#event_area').html("<%= escape_javascript(render :partial => 'event') %>")
             .css({ backgroundColor: '#ffff99' });
  <!-- escape_javascript()可以縮寫為j()。 -->

<!-- 向伺服器請求 JSON 或 XML 資料格式，然後客戶端瀏覽器的 JavaScript 解析後再動作。 -->
  <%= link_to 'ajax show', event_path(event), :remote => true, :data => { :type => :json }, :class => "ajax_update" %>
  <script>
    $(document).ready(function() {
        $('.ajax_update').on("ajax:success", function(event, data) {
            var event_area = $('#event_area');
            event_area.html( data.name );
        });
    });
  </script>

  <!--   另一種JSON的變形是JSONP(JSON with Padding)，將JSON資料包在一個JavaScript function裡，
  這個做的用處是讓這個API可以跨網域被呼叫。要回傳JSONP格式，只需要在render :json時多一個參數是:callback即可
   -->
  respond_to do |format|
    format.json { render :json => @user.to_json, :callback => "process_user" }
  end
